from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import MessageHandler, CallbackQueryHandler, filters, ContextTypes

from start import main_menu_reply_keyboard, active_tournament
from databaseAPI import rep_chess_db
from util import check_string


def construct_nickname_keyboard(nickname) -> InlineKeyboardMarkup:
    if not nickname:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üö´ <–Ω–µ –∑–∞–¥–∞–Ω>", callback_data="permanent_nickname:")],
            [InlineKeyboardButton(f"üìù –í–≤–µ—Å—Ç–∏ –Ω–∏–∫", callback_data="temporarily_nickname")],
            [InlineKeyboardButton(f"<< –ù–∞–∑–∞–¥", callback_data="go_main_menu")],
        ])
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚úÖ {nickname}", callback_data=f"permanent_nickname:{nickname}")],
        [InlineKeyboardButton(f"üìù –í–≤–µ—Å—Ç–∏ –Ω–∏–∫", callback_data="temporarily_nickname")],
        [InlineKeyboardButton(f"<< –ù–∞–∑–∞–¥", callback_data="go_main_menu")],
    ])


async def process_permanent_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, nickname = query.data.split(":")
    if not nickname:
        await context.bot.send_message(
            update.effective_chat.id,
            "–£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –Ω–∏–∫! –î–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\"",
            parse_mode="markdown"
        )
        await ask_about_registration(update, context)
        return
    await context.bot.send_message(
        update.effective_chat.id,
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –£–¥–∞—á–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ!",
        reply_markup=main_menu_reply_keyboard()
    )

    games_played = context.user_data["user_db_data"]["games_played"]
    if games_played < 20:
        k_factor = 90 - games_played * 3
    else:
        k_factor = 30
    rep_chess_db.add_user_on_tournament(
        context.user_data["user_db_data"]["user_id"],
        active_tournament["tournament_id"],
        nickname,
        context.user_data["user_db_data"]["rep_rating"],
        k_factor
    )


async def reading_temp_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nickname = update.message.text
    if len(nickname) > 100:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ.")
        await process_temp_nickname(update, context)
        return

    if not check_string(nickname):
        await context.bot.send_message(update.effective_chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∏–∫–µ! –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª, -, !, ?")
        await process_temp_nickname(update, context)
        return

    context.user_data["text_state"] = None
    await context.bot.send_message(
        update.effective_chat.id,
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –£–¥–∞—á–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ!",
        reply_markup=main_menu_reply_keyboard()
    )

    games_played = context.user_data["user_db_data"]["games_played"]
    if games_played < 20:
        k_factor = 90 - games_played * 3
    else:
        k_factor = 30
    rep_chess_db.add_user_on_tournament(
        context.user_data["user_db_data"]["user_id"],
        active_tournament["tournament_id"],
        nickname,
        context.user_data["user_db_data"]["rep_rating"],
        k_factor
    )


async def process_temp_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()

    context.user_data["text_state"] = reading_temp_nickname
    await context.bot.send_message(update.effective_chat.id, "*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä:*", parse_mode="markdown")


async def ask_about_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not active_tournament["active"]:
        await context.bot.send_message(
            update.effective_chat.id,
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞.\n\n"
            "–ï—Å–ª–∏ –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.",
            reply_markup=main_menu_reply_keyboard()
        )
        return

    if update.message:
        telegram_id = update.message.from_user.id
    elif update.callback_query:
        telegram_id = update.callback_query.from_user.id
    if "user_db_data" not in context.user_data:
        context.user_data["user_db_data"] = rep_chess_db.get_user_on_telegram_id(telegram_id)

    nickname = context.user_data["user_db_data"]["nickname"]
    await context.bot.send_message(
        update.effective_chat.id,
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä\n{active_tournament["date_time"]} "
        f" *{active_tournament["summary"]}*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º?\n\n"
        "–¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –Ω–∏–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π:",
        reply_markup=construct_nickname_keyboard(nickname),
        parse_mode="markdown"
    )


registration_callback_handlers = [
    MessageHandler(filters.Regex("^‚öî –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä$"), ask_about_registration),
    CallbackQueryHandler(process_permanent_nickname, "^permanent_nickname:"),
    CallbackQueryHandler(process_temp_nickname, "^temporarily_nickname$"),
]
